* to generate ssh key pair:  ssh-keygen -t rsa -C "<emailid>"

! after generating the ssh key pair add the public key to your github account in settings

! then config the user name and email using git config command
* git config --global user.name "username"
* git config --global user.email "emailid"
* git remote -v :  is used to check the remote repositories that our local Git repository is connected 
* then to copy the repository locally: git clone "<copy paste the ssh related url>"

* to direct changes from working area to staged-area: git add . 
* by commiting the changes the current version will be availble even if you modify it later and also the commited ones will redirect to remote repository if we do push command and vice-versa: git commit -m "message"
* to see the status of the local repo:git status
* to view all the commits in the respository: git log

* to push the changes made in local to remote use: git push

* to pull the changes made in remote to local use: git pull

* to go to gui tool use command: git gui&
 
* to open gitk tool use command: gitk&


! so every time we make a commit the current version will be stored as a tree 
* if we use command git show -s --pretty=raw <the first 4 to 5 letters of the SHA-1 hash value of the commit>
! above command gives the parent of the current tree node and tree node info
* to look into the tree use command: git ls-tree <the first 4 to 5 letters of the tree sha-1 hash>
! this will give us the result of that version like how many files are there and what is the content that directory and files have.
* to look into each file use command: git show <first 4 to 5 letters of the blob sha-1 hash>

! the commits stores the version as a tree and that trees store the information in large binary object files.


! commands for practice : here I used some dummy sha-1 letters just for practice
git show -s --pretty=raw d2d84 (commit id)
git ls-tree 629eb (tree id)
git show abb54 (blob id)


UNDOING CHANGES

from working directory
* git checkout --<file> (to remove changes from that particular file)
* git checkout . (to remove all changes)
if we create new file  and write something by using checkout command it only removes the text in the new file but does not delete the new file
* to remove the new files : git clean -xdf
f-force, d-directory

from staging area to working directory
* git reset -- <file.txt>

from local repo to staging area
* if we commit then to revert the commit use command: git reset HEAD~n (here n represents how many commits do you want to revert)
* to save the changes in a file in the previous version other than creating new one use:
git commit --ammend -m "commit message"

* git reset --soft HEAD~1 this reverts the commit to staging area
* git reset --mixed HEAD~1 this reverts the commit to working area
* git reset --hard HEAD~1 this removes the commit

from remote repo
* git revert <sha1>


GIT IGNORE

If you want large no of files and you only want to track the changes made only in some files, and this can be done with the help of git ignore.

create a file named as .gitignore in the repository
then write the names of the files which should be ignored.

examples

--> .*log to ignore all .log files
--> !error.log  track error.log file even though you are ignoring .log files
--> /TODO only ignore TODO file
--> build/ ignore all files in the build/ directory
--> doc/*.txt ignore all .txt files only in doc directory but no in subdirectories
--> doc/**/*.pdf ignore all pdf files in the doc directory and in subdirectories also

BRANCHING AND MERGING
fast forward and non fast forward merging
* git checkout -b <branchname> to create new brach
* git checkout <branchname> to go to that branch
* git merge <branchname> to merge the branch into current branch

--> avoid conflicts
short commits
no edits to whitespaces
merge often
--> conflicts solving
* abort merge or cancel the merge: git merge --abort
* git checkout --Xours --Xtheirs (resolve by selecting version)
if you are confident that your code is correct so to resolve conflict merge the both of them and keep your data finally using this command (git checkout --Xours) and viceversa
* git diff (to resolve merge manually)
* git revert <sha1> (to undo merge)
* user merge tool

REBASE AND CHERRY PICK commands

TAG

! we can name the commits using tag command and this tag also can be used instead of SHA1

* git tag <tagname>
* git tag --list to see all the tags
* git push --tags to push tags seperately
* git checkout <tagname> (to navigate to that particular branch)

STASH
! if you are doing something in your branch and you have to suddenly switch to some other branch, here you can't commit those changes and also cannot remove those changes in this case we can place those changes in some other places using stash, so the changes will remain but not commited yet.
* git stash save "<description>"
* git stash list (to view stashes)
* git stash pop (bring the changes back and remove from the stash)
* git stash apply (bring them back and leave in stash)
* git stash drop (to remove or clear them)
